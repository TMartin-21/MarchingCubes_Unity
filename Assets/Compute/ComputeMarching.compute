#pragma kernel MarchingCubes

#include "LookupTables.hlsl"
#include "ComputeMarchingFunctions.compute"

struct Triangle
{
    float3 a, b, c;
};

//uint size;
float isolevel;
RWStructuredBuffer<float> weightBuffer;

AppendStructuredBuffer<Triangle> triangleBuffer;

void March(uint3 id)
{

}

[numthreads(8,8,8)]
void MarchingCubes (uint3 id : SV_DispatchThreadID)
{
    if (id.x > 101 - 1 || id.y > 101 - 1 || id.z > 101 - 1)
        return;
        
        float weights[8];
    //for (int i = 0; i < 8; i++)
    weights[0] = weightBuffer[IndexFromID(id + offset[0])];
    weights[1] = weightBuffer[IndexFromID(id + offset[1])];
    weights[2] = weightBuffer[IndexFromID(id + offset[2])];
    weights[3] = weightBuffer[IndexFromID(id + offset[3])];
    weights[4] = weightBuffer[IndexFromID(id + offset[4])];
    weights[5] = weightBuffer[IndexFromID(id + offset[5])];
    weights[6] = weightBuffer[IndexFromID(id + offset[6])];
    weights[7] = weightBuffer[IndexFromID(id + offset[7])];

    int cubeIndex = GetCubeIndex(weights, isolevel);
    int tri[16] = triangulation[cubeIndex];
    Triangle _triangle;
    
    for (int j = 0; tri[j] != -1; j += 3)
    {
        float3 a = offset[edges[tri[j]][0]];
        float3 b = offset[edges[tri[j]][1]];
           
        float3 c = offset[edges[tri[j + 1]][0]];
        float3 d = offset[edges[tri[j + 1]][1]];
        
        float3 e = offset[edges[tri[j + 2]][0]];
        float3 f = offset[edges[tri[j + 2]][1]];
       
        _triangle.a = Interpolate(
            a,
            b,
            weights[edges[tri[j]][0]],
            weights[edges[tri[j]][1]],
            isolevel
        );
        _triangle.b = Interpolate(
            c,
            d,
            weights[edges[tri[j + 1]][0]],
            weights[edges[tri[j + 1]][1]],
            isolevel
        );
        _triangle.c = Interpolate(
            e,
            f,
            weights[edges[tri[j + 2]][0]],
            weights[edges[tri[j + 2]][1]],
            isolevel
        );
        triangleBuffer.Append(_triangle);
    }
    // get cube weights:: for i < 8: weightBuffer[(x, y, z) + offset[i]] = weights[i]
    // get cube vertices:: for i < 8: (x, y, z) + offset[i] = vertices[i]
}
